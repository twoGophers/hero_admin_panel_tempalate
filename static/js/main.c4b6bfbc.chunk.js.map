{"version":3,"sources":["hooks/http.hook.js","components/heroesListItem/HeroesListItem.js","components/spinner/Spinner.js","components/heroesList/HeroesList.js","actions/index.js","components/heroesAddForm/HeroesAddForm.js","components/heroesFilters/HeroesFilters.js","components/app/App.js","reducers/heroes.js","reducers/filters.js","store/index.js","index.js"],"names":["useHttp","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","HeroesListItem","elementClassName","name","description","element","onDelete","className","src","alt","style","onClick","type","aria-label","Spinner","role","HeroesList","props","filteredHeroesSelector","createSelector","state","filters","activeFilter","heroes","filter","item","filteredHeroes","useSelector","heroesLoadingStatus","dispatch","useDispatch","useEffect","then","payload","catch","id","console","log","heroDeleted","err","arr","elements","length","CSSTransition","timeout","classNames","map","TransitionGroup","component","HeroesAddForm","useState","heroName","setHeroName","heroDescr","setHeroDescr","heroElement","setHeroElement","filtersLoadingStatus","onSubmit","e","preventDefault","hero","newHero","uuidv4","JSON","stringify","res","htmlFor","required","placeholder","value","onChange","target","label","renderFilters","HeroesFilters","filtersFetched","btnClass","App","initialState","action","newCreatedHeroList","newHeroList","store","createStore","combineReducers","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4b6bfbc.chunk.js","sourcesContent":["import { useCallback } from \"react\";\n\nexport const useHttp = () => {\n    // const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        // setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data;\n        } catch(e) {\n            // setProcess('error');\n            throw e;\n        }\n    }, []);\n\n    // const clearError = useCallback(() => {\n        // setProcess('loading');\n    // }, []);\n\n    return {request, \n            // clearError, \n            // process, \n            // setProcess\n        }\n}","const HeroesListItem = ({name, description, element, onDelete}) => {\n\n    let elementClassName;\n\n    switch (element) {\n        case 'fire':\n            elementClassName = 'bg-danger bg-gradient';\n            break;\n        case 'water':\n            elementClassName = 'bg-primary bg-gradient';\n            break;\n        case 'wind':\n            elementClassName = 'bg-success bg-gradient';\n            break;\n        case 'earth':\n            elementClassName = 'bg-secondary bg-gradient';\n            break;\n        default:\n            elementClassName = 'bg-warning bg-gradient';\n    }\n\n    return (\n        <li \n            className={`card flex-row mb-4 shadow-lg text-white ${elementClassName}`}>\n            <img src=\"http://www.stpaulsteinbach.org/wp-content/uploads/2014/09/unknown-hero.jpg\" \n                 className=\"img-fluid w-25 d-inline\" \n                 alt=\"unknown hero\" \n                 style={{'objectFit': 'cover'}}/>\n            <div className=\"card-body\">\n                \n                <h3 className=\"card-title\">{name}</h3>\n                <p className=\"card-text\">{description}</p>\n            </div>\n            <span onClick={onDelete} \n                className=\"position-absolute top-0 start-100 translate-middle badge border rounded-pill bg-light\">\n                <button type=\"button\" className=\"btn-close btn-close\" aria-label=\"Close\"></button>\n            </span>\n        </li>\n    )\n}\n\nexport default HeroesListItem;","\nconst Spinner = () => {\n    return (\n        <div className=\"spinner-border mx-auto mt-5\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n        </div>\n    )\n}\n\nexport default Spinner;","import {useHttp} from '../../hooks/http.hook';\nimport { useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport { heroesFetching, heroesFetched, heroesFetchingError, heroDeleted } from '../../actions';\nimport HeroesListItem from \"../heroesListItem/HeroesListItem\";\nimport Spinner from '../spinner/Spinner';\nimport { createSelector } from 'reselect';\n\n// Задача для этого компонента:\n// При клике на \"крестик\" идет удаление персонажа из общего состояния\n// Усложненная задача:\n// Удаление идет и с json файла при помощи метода DELETE\n\nconst HeroesList = (props) => {\n\n    const filteredHeroesSelector = createSelector(\n        (state) => state.filters.activeFilter,\n        (state) => state.heroes.heroes,\n        (filter, heroes) => {\n            if( filter === 'all') {\n                return heroes;\n            } else {\n                return heroes.filter(item => item.element === filter);\n            }\n        }\n    )\n    const filteredHeroes = useSelector(filteredHeroesSelector);\n    const heroesLoadingStatus = useSelector(state => state.heroesLoadingStatus);\n    const dispatch = useDispatch();\n    const {request} = useHttp();\n\n    useEffect(() => {\n        dispatch(heroesFetching());\n        // request(\"http://localhost:3001/heroes\")\n        request(\"https://my-json-server.typicode.com/twoGophers/hero_admin_panel_tempalate/heroes\")\n            .then(data => dispatch(heroesFetched(data)))\n            .catch(() => dispatch(heroesFetchingError()))\n\n        // eslint-disable-next-line\n    }, []);\n\n    // Функция берет id и по нему удаляет ненужного персонажа из store\n    // ТОЛЬКО если запрос на удаление прошел успешно\n    // Отслеживайте цепочку действий actions => reducers\n    const onDelete = useCallback((id) => {\n        // Удаление персонажа по его id\n        // request(`http://localhost:3001/heroes/${id}`, \"DELETE\")\n        request(`https://my-json-server.typicode.com/twoGophers/hero_admin_panel_tempalate/heroes/${id}`, \"DELETE\")\n            .then(data => console.log(data, 'Deleted'))\n            .then(dispatch(heroDeleted(id)))\n            .catch(err => console.log(err));\n        // eslint-disable-next-line  \n    }, [request]);\n\n    if (heroesLoadingStatus === \"loading\") {\n        return <Spinner/>;\n    } else if (heroesLoadingStatus === \"error\") {\n        return <h5 className=\"text-center mt-5\">Ошибка загрузки</h5>\n    }\n\n    const renderHeroesList = (arr) => {\n        if (arr.length === 0) {\n            return (\n                <CSSTransition\n                    timeout={0}\n                    classNames=\"hero\">\n                    <h5 className=\"text-center mt-5\">Героев пока нет</h5>\n                </CSSTransition>\n            )\n        }\n\n        return arr.map(({id, ...props}) => {\n            return (\n                <CSSTransition \n                    key={id}\n                    timeout={500}\n                    classNames=\"hero\">\n                    <HeroesListItem  {...props} onDelete={() => onDelete(id)}/>\n                </CSSTransition>\n            )\n        })\n    }\n\n    const elements = renderHeroesList(filteredHeroes);\n    return (\n        <TransitionGroup component=\"ul\">\n            {elements}\n        </TransitionGroup>\n    )\n}\n\nexport default HeroesList;","export const heroesFetching = () => {\n    return {\n        type: 'HEROES_FETCHING'\n    }\n}\n\nexport const heroesFetched = (heroes) => {\n    return {\n        type: 'HEROES_FETCHED',\n        payload: heroes\n    }\n}\n\nexport const heroesFetchingError = () => {\n    return {\n        type: 'HEROES_FETCHING_ERROR'\n    }\n}\n\nexport const filtersFetching = () => {\n    return {\n        type: 'FILTERS_FETCHING'\n    }\n}\n\nexport const filtersFetched = (filters) => {\n    return {\n        type: 'FILTERS_FETCHED',\n        payload: filters\n    }\n}\n\nexport const filtersFetchingError = () => {\n    return {\n        type: 'FILTERS_FETCHING_ERROR'\n    }\n}\n\nexport const activeFilterChanged = (filter) => {\n    return {\n        type: 'ACTIVE_FILTER_CHANGED',\n        payload: filter\n    }\n}\n\nexport const heroCreated = (hero) => {\n    return {\n        type: 'HERO_CREATED',\n        payload: hero\n    }\n}\n\nexport const heroDeleted = (id) => {\n    return {\n        type: 'HERO_DELETED',\n        payload: id\n    }\n}","// Задача для этого компонента:\n// Реализовать создание нового героя с введенными данными. Он должен попадать\n// в общее состояние и отображаться в списке + фильтроваться\n// Уникальный идентификатор персонажа можно сгенерировать через uiid\n// Усложненная задача:\n// Персонаж создается и в файле json при помощи метода POST\n// Дополнительно:\n// Элементы <option></option> желательно сформировать на базе\n// данных из фильтров\n\nimport {useHttp} from '../../hooks/http.hook';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { heroCreated } from '../../actions';\n\nconst HeroesAddForm = () => {\n    // Состояния для контроля формы\n    const [heroName, setHeroName] = useState('');\n    const [heroDescr, setHeroDescr] = useState('');\n    const [heroElement, setHeroElement] = useState('');\n\n    const {filters, filtersLoadingStatus} = useSelector(state => state.filters);\n    const dispatch = useDispatch();\n    const {request} = useHttp();\n\n    const onSubmitHandler = (e) => {\n        e.preventDefault();\n        // Можно сделать и одинаковые названия состояний,\n        // хотел показать вам чуть нагляднее\n        // Генерация id через библиотеку\n        const newHero = {\n            id: uuidv4(),\n            name: heroName,\n            description: heroDescr,\n            element: heroElement\n        }\n\n        // Отправляем данные на сервер в формате JSON\n        // ТОЛЬКО если запрос успешен - отправляем персонажа в store\n        // request(\"http://localhost:3001/heroes\", \"POST\", JSON.stringify(newHero))\n        request(\"https://my-json-server.typicode.com/twoGophers/hero_admin_panel_tempalate/heroes\", \"POST\", JSON.stringify(newHero))\n            .then(res => console.log(res, 'Отправка успешна'))\n            .then(dispatch(heroCreated(newHero)))\n            .catch(err => console.log(err));\n\n        // Очищаем форму после отправки\n        setHeroName('');\n        setHeroDescr('');\n        setHeroElement('');\n    }\n\n    const renderFilters = (filters, status) => {\n        if (status === \"loading\") {\n            return <option>Загрузка элементов</option>\n        } else if (status === \"error\") {\n            return <option>Ошибка загрузки</option>\n        }\n        \n        // Если фильтры есть, то рендерим их\n        if (filters && filters.length > 0 ) {\n            return filters.map(({name, label}) => {\n                // Один из фильтров нам тут не нужен\n                // eslint-disable-next-line\n                if (name === 'all')  return;\n\n                return <option key={name} value={name}>{label}</option>\n            })\n        }\n    }\n\n    return (\n        <form className=\"border p-4 shadow-lg rounded\" onSubmit={onSubmitHandler}>\n            <div className=\"mb-3\">\n                <label htmlFor=\"name\" className=\"form-label fs-4\">Имя нового героя</label>\n                <input \n                    required\n                    type=\"text\" \n                    name=\"name\" \n                    className=\"form-control\" \n                    id=\"name\" \n                    placeholder=\"Как меня зовут?\"\n                    value={heroName}\n                    onChange={(e) => setHeroName(e.target.value)}/>\n            </div>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"text\" className=\"form-label fs-4\">Описание</label>\n                <textarea\n                    required\n                    name=\"text\" \n                    className=\"form-control\" \n                    id=\"text\" \n                    placeholder=\"Что я умею?\"\n                    style={{\"height\": '130px'}}\n                    value={heroDescr}\n                    onChange={(e) => setHeroDescr(e.target.value)}/>\n            </div>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"element\" className=\"form-label\">Выбрать элемент героя</label>\n                <select \n                    required\n                    className=\"form-select\" \n                    id=\"element\" \n                    name=\"element\"\n                    value={heroElement}\n                    onChange={(e) => setHeroElement(e.target.value)}>\n                    <option value=\"\">Я владею элементом...</option>\n                    {renderFilters(filters, filtersLoadingStatus)}\n                </select>\n            </div>\n\n            <button type=\"submit\" className=\"btn btn-primary\">Создать</button>\n        </form>\n    )\n}\n\nexport default HeroesAddForm;","import {useHttp} from '../../hooks/http.hook';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\n\nimport { filtersFetching, filtersFetched, filtersFetchingError, activeFilterChanged } from '../../actions';\nimport Spinner from '../spinner/Spinner';\n\n// Задача для этого компонента:\n// Фильтры должны формироваться на основании загруженных данных\n// Фильтры должны отображать только нужных героев при выборе\n// Активный фильтр имеет класс active\n\nconst HeroesFilters = () => {\n\n    const {filters, filtersLoadingStatus, activeFilter} = useSelector(state => state.filters);\n    const dispatch = useDispatch();\n    const {request} = useHttp();\n\n    // Запрос на сервер для получения фильтров и последовательной смены состояния\n    useEffect(() => {\n        dispatch(filtersFetching());\n        // request(\"http://localhost:3001/filters\")\n        request(\"https://my-json-server.typicode.com/twoGophers/hero_admin_panel_tempalate/filters\")\n            .then(data => dispatch(filtersFetched(data)))\n            .catch(() => dispatch(filtersFetchingError()))\n\n        // eslint-disable-next-line\n    }, []);\n\n    if (filtersLoadingStatus === \"loading\") {\n        return <Spinner/>;\n    } else if (filtersLoadingStatus === \"error\") {\n        return <h5 className=\"text-center mt-5\">Ошибка загрузки</h5>\n    }\n\n    const renderFilters = (arr) => {\n        if (arr.length === 0) {\n            return <h5 className=\"text-center mt-5\">Фильтры не найдены</h5>\n        }\n\n        // Данные в json-файле я расширил классами и текстом\n        return arr.map(({name, className, label}) => {\n\n            // Используем библиотеку classnames и формируем классы динамически\n            const btnClass = classNames('btn', className, {\n                'active': name === activeFilter\n            });\n            \n            return <button \n                        key={name} \n                        id={name} \n                        className={btnClass}\n                        onClick={() => dispatch(activeFilterChanged(name))}\n                        >{label}</button>\n        })\n    }\n\n    const elements = renderFilters(filters);\n\n    return (\n        <div className=\"card shadow-lg mt-4\">\n            <div className=\"card-body\">\n                <p className=\"card-text\">Отфильтруйте героев по элементам</p>\n                <div className=\"btn-group\">\n                    {elements}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default HeroesFilters;","import HeroesList from '../heroesList/HeroesList';\nimport HeroesAddForm from '../heroesAddForm/HeroesAddForm';\nimport HeroesFilters from '../heroesFilters/HeroesFilters';\n\nimport './app.scss';\n\nconst App = () => {\n    \n    return (\n        <main className=\"app\">\n            <div className=\"content\">\n                <HeroesList/>\n                <div className=\"content__interactive\">\n                    <HeroesAddForm/>\n                    <HeroesFilters/>\n                </div>\n            </div>\n        </main>\n    )\n}\n\nexport default App;","const initialState = {\r\n    heroes: [],\r\n    heroesLoadingStatus: 'idle',\r\n}\r\n\r\nconst heroes = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'HEROES_FETCHING':\r\n            return {\r\n                ...state,\r\n                heroesLoadingStatus: 'loading'\r\n            }\r\n        case 'HEROES_FETCHED':\r\n            return {\r\n                ...state,\r\n                heroes: action.payload,\r\n                heroesLoadingStatus: 'idle'\r\n            }\r\n        case 'HEROES_FETCHING_ERROR':\r\n            return {\r\n                ...state,\r\n                heroesLoadingStatus: 'error'\r\n            }\r\n        case 'FILTERS_FETCHING':\r\n            return {\r\n                ...state,\r\n                filtersLoadingStatus: 'loading'\r\n            }\r\n        case 'ACTIVE_FILTER_CHANGED':\r\n            return {\r\n                ...state,\r\n                activeFilter: action.payload\r\n            }\r\n        // Самая сложная часть - это показывать новые элементы по фильтрам\r\n        // при создании или удалении\r\n        case 'HERO_CREATED':\r\n            // Формируем новый массив    \r\n            let newCreatedHeroList = [...state.heroes, action.payload];\r\n            return {\r\n                ...state,\r\n                heroes: newCreatedHeroList,\r\n            }\r\n        case 'HERO_DELETED': \r\n            // Формируем новый массив\r\n            const newHeroList = state.heroes.filter(item => item.id !== action.payload);\r\n            return {\r\n                ...state,\r\n                heroes: newHeroList,\r\n            }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default heroes;","const initialState = {\r\n    filters: [],\r\n    filtersLoadingStatus: 'idle',\r\n    activeFilter: 'all'\r\n}\r\n\r\nconst filters = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'FILTERS_FETCHING':\r\n            return {\r\n                ...state,\r\n                filtersLoadingStatus: 'loading'\r\n            }\r\n        case 'FILTERS_FETCHED':\r\n            return {\r\n                ...state,\r\n                filters: action.payload,\r\n                filtersLoadingStatus: 'idle'\r\n            }\r\n        case 'FILTERS_FETCHING_ERROR':\r\n            return {\r\n                ...state,\r\n                filtersLoadingStatus: 'error'\r\n            }\r\n        case 'ACTIVE_FILTER_CHANGED':\r\n            return {\r\n                ...state,\r\n                activeFilter: action.payload\r\n            }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default filters;","import { createStore, combineReducers } from 'redux';\nimport heroes from '../reducers/heroes';\nimport filters from '../reducers/filters';\n\nconst store = createStore( combineReducers({heroes, filters}) , window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './components/app/App';\nimport store from './store';\n\nimport './styles/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}